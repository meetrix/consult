service: serverless-rest-api-with-dynamodb

frameworkVersion: ">=1.1.0 <2.0.0"

plugins:
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-webpack

custom:
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
    migration:
      dir: offline/migrations
    webpack:
      IncludeModules: true

provider:
  name: aws
  region: us-west-2
  runtime: nodejs6.10
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    CONSULT_TABLE: consultUser

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchGetItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchGetItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CONSULT_TABLE}"

functions:
  create:
    handler: scheduler/create.create
    events:
      - http:
          path: schedule
          method: post
          cors: true

  list:
    handler: scheduler/list.list
    events:
      - http:
          path: schedule
          method: get
          cors: true

  get:
    handler: scheduler/get.get
    events:
      - http:
          path: schedule/{id}
          method: get
          cors: true

  updateScheduler:
      handler: scheduler/update.update
      events:
        - http:
            path: schedule
            method: put
            cors: true

  deleteSchedular:
      handler: scheduler/delete.delete
      events:
        - http:
            path: schedule
            method: delete
            cors: true

  update:
    handler: todos/update.update
    events:
      - http:
          path: todos/{id}
          method: put
          cors: true

  delete:
    handler: todos/delete.delete
    events:
      - http:
          path: todos/{id}
          method: delete
          cors: true

  JwtDecorde:
      handler: jwtTokenDecorder/get.get
      events:
        - http:
            path: jwt
            method: get
            cors: true

  userCreate:
      handler: user/create.create
      events:
        - http:
            path: user
            method: post
            cors: true
  testAuthToken:
      handler: scheduler/test.create
      events:
        - http:
            path: scheduler/test
            method: post
            cors: true
  getAuthUserInitData:
      handler: user/AuthUserInitData.get
      events:
        - http:
            path: user/init
            method: get
            cors: true
  getFreeEventsFromUser:
      handler: user/userEventsFree.get
      events:
        - http:
            path: user/events/free
            method: get
            cors: true



resources:
  Resources:
    TodosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}

    UserDynamoDbTable:
          Type: 'AWS::DynamoDB::Table'
          DeletionPolicy: Retain
          Properties:
            AttributeDefinitions:
              -
                AttributeName: id
                AttributeType: S
            KeySchema:
              -
                AttributeName: id
                KeyType: HASH
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
            TableName:  ${self:provider.environment.CONSULT_TABLE}




